import numpy as np
from scipy.fft import fft2, ifft2
from skimage import io, color
from skimage.metrics import mean_squared_error
import matplotlib.pyplot as plt

def compress_image(image, compression_ratio):
    image_fft = np.zeros_like(image, dtype=np.complex128)
    for i in range(image.shape[2]):
        image_fft[:, :, i] = fft2(image[:, :, i])

    total_coefficients = image.shape[0] * image.shape[1]
    num_coefficients_to_keep = int(total_coefficients * (1 - compression_ratio))

    sorted_coefficients = np.sort(np.abs(image_fft.flatten()))[::-1]

    threshold = sorted_coefficients[num_coefficients_to_keep]
    image_fft[np.abs(image_fft) < threshold] = 0

    compressed_image = np.zeros_like(image, dtype=np.float64)
    for i in range(image.shape[2]):
        compressed_image[:, :, i] = np.abs(ifft2(image_fft[:, :, i]))

    return compressed_image

color_image = io.imread('squares.png.png')  

compression_ratio = 0.9
compressed_image = compress_image(color_image, compression_ratio)

plt.figure(figsize=(10, 5))

plt.subplot(1, 3, 1)
plt.imshow(color_image)
plt.title('Oryginalny Obraz')

plt.subplot(1, 3, 2)
plt.imshow(compressed_image)
plt.title('Skompresowany Obraz')

plt.show()

